# -*- coding: utf-8 -*-
"""RPS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EbuSSlxJj-IjyUCWNxPmAqx815DjlohO
"""

#import lib yang di perlukan
import os
import zipfile
import matplotlib.pyplot as plt
import matplotlib.pyplot as mpmig
import tensorflow as tf
import keras_preprocessing
import matplotlib.pyplot as plt
import shutil
import numpy as np
from google.colab import files
from keras.preprocessing import image
from keras_preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from sklearn.model_selection import train_test_split
from keras.callbacks import EarlyStopping
from PIL import ImageFile
from tensorflow.keras.models import Sequential
from keras import callbacks
from tensorflow.keras import layers

#download dataset yang di perlukan
#sesuaikan dataset yang akan anda masukan
!wget #masukkan data set di sini#

#unzip file yang sudah di dwonload 
local_zip = '/content/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content/sample_data')
zip_ref.close()

#mengatur derictory
base_dir = '/content/sample_data/rockpaperscissors'
train_dir = os.path.join(base_dir, 'rps-cv-images')

os.listdir(base_dir)
train_dir = os.path.join(base_dir, 'rps-cv-images')

#menampilkan jumlah file yang ada beserta jenis nya
fold_batu= os.path.join('/content/sample_data/rockpaperscissors/rock')
fold_gunting= os.path.join('/content/sample_data/rockpaperscissors/scissors')
fold_kertas= os.path.join('/content/sample_data/rockpaperscissors/paper')

print('total gambar batu untuk:', len(os.listdir(fold_batu)))
print('total gambar gunting untuk:', len(os.listdir(fold_gunting)))
print('total gambar kertas untuk:', len(os.listdir(fold_kertas)))

print('Menampilkan nama file gambar:')


file_batu = os.listdir(fold_batu)
print("Batu:",file_batu[:4])

file_gunting = os.listdir(fold_gunting)
print("Gunting :",file_gunting[:4])

file_kertas = os.listdir(fold_kertas)
print("Kertas:",file_kertas[:4])

# Commented out IPython magic to ensure Python compatibility.
#menampilkan jumlah file dan data yang ada dalam bentuk gambar dan di kelompokan beserta jenis nya
# %matplotlib inline

nrows = 3
ncols = 4

pic_index = 0
fig = plt.gcf()
fig.set_size_inches(ncols * 4, nrows * 3)

pic_index += 4
gbr_tampil_batu     = [os.path.join(fold_batu, fname)
                      for fname in file_batu[pic_index-4:pic_index]]
gbr_tampil_gunting  = [os.path.join(fold_gunting, fname)
                      for fname in file_gunting[pic_index-4:pic_index]]
gbr_tampil_kertas   = [os.path.join(fold_kertas, fname)
                      for fname in file_kertas[pic_index-4:pic_index]]

for i, img_path in enumerate(gbr_tampil_batu+gbr_tampil_gunting+gbr_tampil_kertas):
  sp = plt.subplot(nrows, ncols, i + 1)
  sp.axis('On')
  img = mpig.imread(img_path)
  plt.imshow(img)

plt.show()

# membuat object image data generator
BASIS_DIR = "/content/sample_data/rockpaperscissors/rps-cv-images" 
training_datagen = ImageDataGenerator(
      rescale = 1./255,
	    rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest',
      validation_split=0.4
      )
validation_generator= ImageDataGenerator(
      rescale = 1./255,
	    rotation_range=40,
      width_shift_range=0.2,
      height_shift_range=0.2,
      shear_range=0.2,
      zoom_range=0.2,
      horizontal_flip=True,
      fill_mode='nearest',
      validation_split=0.4
      )

#data prosesing dan split data yang ada
train_generator = training_datagen.flow_from_directory(
	'/content/sample_data/rockpaperscissors/rps-cv-images',
	target_size=(150,150),
  classes=['paper', 'rock', 'scissors'],
	class_mode='categorical',
  shuffle=True,                                                                   
  subset='training'
  )

validation_generator = training_datagen.flow_from_directory(
	'/content/sample_data/rockpaperscissors/rps-cv-images',
	target_size=(150,150),
  classes=['paper', 'rock', 'scissors'],
	class_mode='categorical',
  shuffle=True,
  subset='validation'
  )

#membuat arsitekrut CNN
model = tf.keras.models.Sequential([

    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2), 
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
  
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),

    tf.keras.layers.Dense(32,  activation='relu'),
    tf.keras.layers.Dense(64,  activation='relu'),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(3,   activation='softmax')
])

model.summary()

#menambahkan optimalisasi data
model.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#membuat fungsi call back 
class TestCallback(tf.keras.callbacks.Callback): 
    def on_epoch_end(self, epoch, logs={}): 
        if(logs.get('accuracy') > 0.96 and logs.get('val_accuracy') > 0.96):
            print("\nAkurasi telah mencapai >97%!") 
            self.model.stop_training = True 
callbacks = TestCallback()

# latih model dengan model.fit
history = model.fit(
    train_generator,
    steps_per_epoch = 41,
    epochs = 20,
    validation_data = validation_generator,
    validation_steps = 27,
    verbose =1,
    callbacks = [callbacks]
    )

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Akurasi Training ')
plt.plot(epochs, val_acc, 'b', label='Akurasi Validasi')
plt.title('Akurasi Training dan Validasi')
plt.legend(loc=0)
plt.figure()
plt.show()

import numpy as np
from google.colab import files
from keras.preprocessing import image

uploaded = files.upload()

for fn in uploaded.keys():

  path = fn
  img = image.load_img(path, target_size=(150, 150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  print(fn)
  if classes[0][0]==1:
    print('Tangan Ini Menunjukkan bentuk KERTAS')
  elif classes[0][1]==1:
    print('Tangan Ini Menunjukkan bentuk BATU')
  elif classes[0][2]==1:
    print('Tangan Ini Menunjukkan bentuk GUNTING')
  else:
    print('Tidak Diketahui')